'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _findPackageJson = require('find-package-json');

var _findPackageJson2 = _interopRequireDefault(_findPackageJson);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var filename = require.main && require.main.filename || __dirname;
var projectPath = _path2.default.dirname(filename);
var packageJson = (0, _findPackageJson2.default)(projectPath).next().value;
var userConfig = packageJson && packageJson.timber;

/**
 * The configuration options here are use throughout the timber library.
 * Any of the values can be changed in two different ways:
 *
 * ## Using your package.json
 *
 * To configure timber from your `package.json`, simply add a `timber`
 * object at the root level containing your desired overrides:
 *
 * ```json
 * "timber": {
 *   "capture_request_body": true,
 *   "capture_response_body": true
 * },
 * ```
 *
 * __Note:__ you cannot set the `debug_logger` option from the `package.json`.
 * This is because you must set it as a writeable stream. (see next section)
 *
 * ## Using inline overrides
 *
 * You can also configure timber by overriding the config options inline:
 *
 * ```js
 * const timber = require('timber');
 * timber.config.debug_logger = process.stdout;
 * ```
 *
 * __Note:__ inline overrides will override any options you have set
 * in your `package.json` file.
 *
 * @param {String} metadata_delimiter - delimiter between log message and log data (@metadata by default)
 * @param {boolean} append_metadata - append @metadata { ... } to all logs. If disabled, metadata will only be appended when `NODE_ENV === 'production'` (off by default)
 * @param {Writable} debug_logger - a writeable stream for internal debug messages to be sent to (disabled when undefined)
 * @param {boolean} timestamp_prefix - When `true`, log output should be prefixed with a timestamp in ISO 8601 format (off by default)
 */
var config = _extends({
  _attached_stdout: false,
  _attached_stderr: false,
  logger: console,
  metadata_delimiter: '@metadata', // This should not be changed! The timber service only recognizes @metadata
  append_metadata: false,
  debug_logger: undefined,
  timestamp_prefix: false
}, userConfig);

exports.default = config;